/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.example;

import java.util.HashMap;
import java.util.Map;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.ServletContextAware;
import com.example.model.Cypher;
import com.example.model.Response;

@RestController
@SpringBootApplication
public class Main implements ServletContextAware {
	@Autowired
	private Encryptr encryptor;
	private ServletContext servletContext;

	public static void main(String[] args) throws Exception {
		SpringApplication.run(Main.class, args);
	}
	@RequestMapping("/")
	public @ResponseBody Map<String, String> mindeix() {
		HashMap<String, String> hashMap = new HashMap<>();
		hashMap.put("eg1", "/e/k/v");
		hashMap.put("eg2", "/d/k/v/i");
		return hashMap;
	}
	@RequestMapping("/e/{value}/{pwd}")
	public HttpEntity<Response> encrypt(HttpServletRequest request, @PathVariable String value,
			@PathVariable String pwd) throws Exception {
		Cypher c = encryptor.encrypt(pwd, pwd.toUpperCase(), value);
		return new ResponseEntity<Response>(new Response(servletContext.getContextPath() + "/d/"
				+ new String(c.getCiphertext()) + "/" + new String(c.getIv()) + "/" + pwd), HttpStatus.OK);
	}
	@RequestMapping("/d/{value}/{iv}/{pwd}")
	public HttpEntity<Response> decrypt(@PathVariable String value, @PathVariable String iv, @PathVariable String pwd)
			throws Exception {
		return new ResponseEntity<Response>(
				new Response(encryptor.decrypt(pwd, pwd.toUpperCase(), value.toCharArray(), iv.toCharArray())),
				HttpStatus.OK);
	}
	@Override
	public void setServletContext(ServletContext servletContext) {
		this.servletContext = servletContext;
	}
}
